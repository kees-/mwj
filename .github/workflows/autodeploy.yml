# name: Site build and deploy

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - 'main'
#     paths:
#       - 'src/**'
#       - 'resources/public/**'

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     steps:

#       - uses: actions/checkout@v3

#       - name: Check path updates
#         uses: dorny/paths-filter@v2.10.2
#         id: pf
#         with:
#           filters: |
#             source:
#               - 'src/**'

#       - name: Access jar cache (maven)
#         if: steps.pf.outputs.source == 'true'
#         uses: actions/cache@v3.0.2
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/shadow-cljs.edn', '.github/workflows/**') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-

#       - name: Access NPM cache
#         if: steps.pf.outputs.source == 'true'
#         uses: actions/cache@v3.0.2
#         env:
#           cache-name: cache-node-modules
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-

#       - name: Access shadow-cljs cache
#         if: steps.pf.outputs.source == 'true'
#         uses: actions/cache@v3.0.2
#         with:
#           path: .shadow-cljs
#           key: ${{ runner.os }}-shadow-cljs-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-shadow-cljs-

#       - name: Build source
#         if: steps.pf.outputs.source == 'true'
#         run: |
#           npm install
#           npm run release

#       - name: (Soft) deploy, invalidation
#         if: steps.pf.outputs.source == 'false'
#         uses: Reggionick/s3-deploy@v3.1.1
#         with:
#           folder: resources/public
#           bucket: ${{ secrets.S3_BUCKET }}
#           bucket-region: ${{ secrets.S3_BUCKET_REGION }}
#           dist-id: ${{ secrets.CLOUDFRONT_DIST_ID }}
#           invalidation: /*
#           delete-removed: false
#           no-cache: no-cache # OR: no-store, must-revalidate
#           private: true

#       - name: (Hard) deploy, invalidation
#         if: steps.pf.outputs.source == 'true'
#         uses: Reggionick/s3-deploy@v3.1.1
#         with:
#           folder: resources/public
#           bucket: ${{ secrets.S3_BUCKET }}
#           bucket-region: ${{ secrets.S3_BUCKET_REGION }}
#           dist-id: ${{ secrets.CLOUDFRONT_DIST_ID }}
#           invalidation: /*
#           delete-removed: true
#           no-cache: no-cache # OR: no-store, must-revalidate
#           private: true
